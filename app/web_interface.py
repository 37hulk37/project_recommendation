import streamlit as st
import requests
import json
from typing import Dict, Optional

API_URL = "http://localhost:8000"

class APIClient:
    def __init__(self):
        self.token: Optional[str] = None
        
    def set_token(self, token: str):
        self.token = token
        
    def get_headers(self) -> Dict:
        return {"Authorization": f"Bearer {self.token}"} if self.token else {}
    
    def register(self, name: str, email: str, password: str, male: bool) -> Dict:
        response = requests.post(
            f"{API_URL}/register",
            json={"name": name, "email": email, "password": password, "male": male}
        )
        return response.json()
    
    def login(self, email: str, password: str) -> Dict:
        response = requests.post(
            f"{API_URL}/token",
            data={"username": email, "password": password}
        )
        return response.json()
    
    def get_account(self) -> Dict:
        response = requests.get(f"{API_URL}/account", headers=self.get_headers())
        return response.json()
    
    def deposit(self, amount: float) -> Dict:
        response = requests.post(
            f"{API_URL}/account/deposit",
            params={"amount": amount},
            headers=self.get_headers()
        )
        return response.json()
    
    def get_items(self, skip: int = 0, limit: int = 10) -> Dict:
        response = requests.get(
            f"{API_URL}/items",
            params={"skip": skip, "limit": limit},
            headers=self.get_headers()
        )
        return response.json()
    
    def get_item(self, item_id: int) -> Dict:
        response = requests.get(
            f"{API_URL}/items/{item_id}",
            headers=self.get_headers()
        )
        return response.json()
    
    def create_prediction(self, item_id: int) -> Dict:
        response = requests.post(
            f"{API_URL}/predictions",
            json={"item_id": item_id},
            headers=self.get_headers()
        )
        return response.json()
    
    def get_predictions(self, skip: int = 0, limit: int = 10) -> Dict:
        response = requests.get(
            f"{API_URL}/predictions",
            params={"skip": skip, "limit": limit},
            headers=self.get_headers()
        )
        return response.json()

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
api_client = APIClient()

def show_auth_page():
    st.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    
    tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    
    with tab1:
        with st.form("login_form"):
            email = st.text_input("Email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            submit = st.form_submit_button("–í–æ–π—Ç–∏")
            
            if submit:
                try:
                    response = api_client.login(email, password)
                    if "access_token" in response:
                        api_client.set_token(response["access_token"])
                        st.session_state.authenticated = True
                        st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")
    
    with tab2:
        with st.form("register_form"):
            name = st.text_input("–ò–º—è")
            email = st.text_input("Email", key="reg_email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_password")
            male = st.checkbox("–ú—É–∂—Å–∫–æ–π –ø–æ–ª")
            submit = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            
            if submit:
                try:
                    response = api_client.register(name, email, password, male)
                    if "user_id" in response:
                        st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
                    else:
                        st.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")

def show_main_page():
    st.title("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    
    # –°–∞–π–¥–±–∞—Ä —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    with st.sidebar:
        try:
            account = api_client.get_account()
            st.write(f"–ë–∞–ª–∞–Ω—Å: {account['balance']:.2f} –∫—Ä–µ–¥–∏—Ç–æ–≤")
            
            with st.form("deposit_form"):
                amount = st.number_input("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", min_value=0.0, step=10.0)
                if st.form_submit_button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å"):
                    response = api_client.deposit(amount)
                    if "balance" in response:
                        st.success(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {response['balance']:.2f}")
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
        
        if st.button("–í—ã–π—Ç–∏"):
            st.session_state.authenticated = False
            api_client.set_token(None)
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    tab1, tab2, tab3 = st.tabs(["–¢–æ–≤–∞—Ä—ã", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ", "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"])
    
    with tab1:
        st.subheader("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
        try:
            items = api_client.get_items()
            for item in items:
                col1, col2, col3 = st.columns([2, 1, 1])
                with col1:
                    st.write(f"**{item['name']}**")
                    st.write(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}")
                with col2:
                    st.write(f"–¶–µ–Ω–∞: {item['price']:.2f}")
                with col3:
                    if st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"item_{item['item_id']}"):
                        st.session_state.selected_item_id = item['item_id']
                        st.rerun()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")
    
    with tab2:
        if "selected_item_id" in st.session_state:
            try:
                item = api_client.get_item(st.session_state.selected_item_id)
                st.subheader(item['name'])
                st.write(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}")
                st.write(f"–°—Ç–∏–ª—å: {item['style']}")
                st.write(f"–†–∞–∑–º–µ—Ä: {item['size']}")
                st.write(f"–¶–≤–µ—Ç: {item['color']}")
                st.write(f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {item['material']}")
                st.write(f"–¶–µ–Ω–∞: {item['price']:.2f}")
                st.write(f"–û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}")
                
                if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
                    try:
                        prediction = api_client.create_prediction(item['item_id'])
                        if "prediction_id" in prediction:
                            st.success("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")
                        else:
                            st.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {str(e)}")
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    with tab3:
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        try:
            predictions = api_client.get_predictions()
            for pred in predictions:
                with st.expander(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ #{pred['prediction_id']} - {pred['created_at']}"):
                    st.write(f"–°—Ç–∞—Ç—É—Å: {pred['status']}")
                    st.write(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {pred['total_cost']:.2f} –∫—Ä–µ–¥–∏—Ç–æ–≤")
                    if pred['status'] == 'completed':
                        st.write("–ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã:")
                        for similar in pred['similar_items']:
                            st.write(f"- {similar['item']['name']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similar['similarity_score']:.2%})")
                    elif pred['status'] == 'failed':
                        st.error(f"–û—à–∏–±–∫–∞: {pred['error_message']}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {str(e)}")

def main():
    st.set_page_config(
        page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        page_icon="üõçÔ∏è",
        layout="wide"
    )

    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if st.session_state.authenticated:
        show_main_page()
    else:
        show_auth_page()

if __name__ == "__main__":
    main() 